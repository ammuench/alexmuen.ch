import config from "../../config.json"
import axios, { AxiosRequestConfig, AxiosResponse } from "axios"


export default async (req, res) => {
  const tweetImages = await getTweets();
  res.status(200).json(JSON.stringify({ data: tweetImages }));
}

export async function getTweets() {
  const twitterToken = process.env.TWITTER_TOKEN || (config as any).twitterToken;
  if (!twitterToken) {
    throw "No twitter token provided"
  }
  const currTime = new Date().toISOString();
  const axConfig: AxiosRequestConfig = {
    url: `https://api.twitter.com/2/users/14194699/tweets?tweet.fields=created_at&exclude=replies,retweets&expansions=attachments.media_keys&media.fields=media_key,type,url&max_results=100&start_time=2020-07-24T17:00:00Z&end_time=${currTime}`,
    method: "get",
    headers: {
      "Authorization": `Bearer ${twitterToken}`
    }
  }
  const twitterGet = axios(axConfig);
  const birdpicsAxios = await twitterGet;
  const birdpicsData = birdpicsAxios.data as BirdTweetAPIResponse;
  const tweetImages: TweetImage[] = _dataMapper(birdpicsData);
  return tweetImages;
}

const _dataMapper = (apiReponse: BirdTweetAPIResponse): TweetImage[] => {
  const mediaMap = new Map<string, string>();
  apiReponse.includes.media.forEach((mediaData) => {
    mediaMap.set(mediaData.media_key, mediaData.url);
  });

  const tweetImageBlocks: TweetImage[] = [];
  apiReponse.data.forEach((tweet) => {
    const mediaKeys = tweet?.attachments?.media_keys;
    if (mediaKeys && mediaKeys.length > 0) {
      mediaKeys.forEach((mediaKey) => {
        if (tweet.text.includes("#birdphotography")) {
          tweetImageBlocks.push({
            id: tweet.id,
            mediaUrl: mediaMap.get(mediaKey),
            createdDate: tweet.created_at
          })
        }
      })
    }
  });
  return tweetImageBlocks;
}

export interface TweetImage {
  id: string;
  mediaUrl: string;
  createdDate: string;
}

// Generated by https://quicktype.io

export interface BirdTweetAPIResponse {
  data: TweetData[];
  includes: Includes;
  meta: Meta;
}

export interface TweetData {
  attachments: TweetAttachments;
  id: string;
  author_id: string;
  text: string;
  created_at: string;
}

export interface TweetAttachments {
  media_keys: string[];
}

export interface Includes {
  media: TweetMedia[];
  users: User[];
}

export interface TweetMedia {
  media_key: string;
  type: Type;
  url: string;
}

export enum Type {
  Photo = "photo",
}

export interface User {
  id: string;
  name: string;
  username: string;
}

export interface Meta {
  oldest_id: string;
  newest_id: string;
  result_count: number;
}
